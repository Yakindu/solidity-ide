/**
 * generated by Xtext 2.18.0
 */
package com.yakindu.solidity.solidity.impl;

import com.yakindu.solidity.solidity.PragmaVersion;
import com.yakindu.solidity.solidity.PragmaVersionConstraint;
import com.yakindu.solidity.solidity.SolidityPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pragma Version</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.yakindu.solidity.solidity.impl.PragmaVersionImpl#getMinorConstraint <em>Minor Constraint</em>}</li>
 *   <li>{@link com.yakindu.solidity.solidity.impl.PragmaVersionImpl#getMajorConstraint <em>Major Constraint</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PragmaVersionImpl extends MinimalEObjectImpl.Container implements PragmaVersion {
	/**
	 * The cached value of the '{@link #getMinorConstraint() <em>Minor Constraint</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMinorConstraint()
	 * @generated
	 * @ordered
	 */
	protected PragmaVersionConstraint minorConstraint;

	/**
	 * The cached value of the '{@link #getMajorConstraint() <em>Major Constraint</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMajorConstraint()
	 * @generated
	 * @ordered
	 */
	protected PragmaVersionConstraint majorConstraint;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PragmaVersionImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return SolidityPackage.Literals.PRAGMA_VERSION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public PragmaVersionConstraint getMinorConstraint() {
		return minorConstraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetMinorConstraint(PragmaVersionConstraint newMinorConstraint, NotificationChain msgs) {
		PragmaVersionConstraint oldMinorConstraint = minorConstraint;
		minorConstraint = newMinorConstraint;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT, oldMinorConstraint, newMinorConstraint);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setMinorConstraint(PragmaVersionConstraint newMinorConstraint) {
		if (newMinorConstraint != minorConstraint) {
			NotificationChain msgs = null;
			if (minorConstraint != null)
				msgs = ((InternalEObject)minorConstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT, null, msgs);
			if (newMinorConstraint != null)
				msgs = ((InternalEObject)newMinorConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT, null, msgs);
			msgs = basicSetMinorConstraint(newMinorConstraint, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT, newMinorConstraint, newMinorConstraint));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public PragmaVersionConstraint getMajorConstraint() {
		return majorConstraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetMajorConstraint(PragmaVersionConstraint newMajorConstraint, NotificationChain msgs) {
		PragmaVersionConstraint oldMajorConstraint = majorConstraint;
		majorConstraint = newMajorConstraint;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT, oldMajorConstraint, newMajorConstraint);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setMajorConstraint(PragmaVersionConstraint newMajorConstraint) {
		if (newMajorConstraint != majorConstraint) {
			NotificationChain msgs = null;
			if (majorConstraint != null)
				msgs = ((InternalEObject)majorConstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT, null, msgs);
			if (newMajorConstraint != null)
				msgs = ((InternalEObject)newMajorConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT, null, msgs);
			msgs = basicSetMajorConstraint(newMajorConstraint, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT, newMajorConstraint, newMajorConstraint));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT:
				return basicSetMinorConstraint(null, msgs);
			case SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT:
				return basicSetMajorConstraint(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT:
				return getMinorConstraint();
			case SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT:
				return getMajorConstraint();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT:
				setMinorConstraint((PragmaVersionConstraint)newValue);
				return;
			case SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT:
				setMajorConstraint((PragmaVersionConstraint)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT:
				setMinorConstraint((PragmaVersionConstraint)null);
				return;
			case SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT:
				setMajorConstraint((PragmaVersionConstraint)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION__MINOR_CONSTRAINT:
				return minorConstraint != null;
			case SolidityPackage.PRAGMA_VERSION__MAJOR_CONSTRAINT:
				return majorConstraint != null;
		}
		return super.eIsSet(featureID);
	}

} //PragmaVersionImpl
