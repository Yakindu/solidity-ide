/**
 * generated by Xtext 2.18.0
 */
package com.yakindu.solidity.solidity.impl;

import com.yakindu.solidity.solidity.PragmaVersionConstraint;
import com.yakindu.solidity.solidity.SolidityPackage;
import com.yakindu.solidity.solidity.VersionOperator;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pragma Version Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.yakindu.solidity.solidity.impl.PragmaVersionConstraintImpl#getVersionOperator <em>Version Operator</em>}</li>
 *   <li>{@link com.yakindu.solidity.solidity.impl.PragmaVersionConstraintImpl#getVersion <em>Version</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PragmaVersionConstraintImpl extends MinimalEObjectImpl.Container implements PragmaVersionConstraint {
	/**
	 * The default value of the '{@link #getVersionOperator() <em>Version Operator</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVersionOperator()
	 * @generated
	 * @ordered
	 */
	protected static final VersionOperator VERSION_OPERATOR_EDEFAULT = VersionOperator.ROOF;

	/**
	 * The cached value of the '{@link #getVersionOperator() <em>Version Operator</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVersionOperator()
	 * @generated
	 * @ordered
	 */
	protected VersionOperator versionOperator = VERSION_OPERATOR_EDEFAULT;

	/**
	 * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVersion()
	 * @generated
	 * @ordered
	 */
	protected static final String VERSION_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVersion()
	 * @generated
	 * @ordered
	 */
	protected String version = VERSION_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PragmaVersionConstraintImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return SolidityPackage.Literals.PRAGMA_VERSION_CONSTRAINT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public VersionOperator getVersionOperator() {
		return versionOperator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setVersionOperator(VersionOperator newVersionOperator) {
		VersionOperator oldVersionOperator = versionOperator;
		versionOperator = newVersionOperator == null ? VERSION_OPERATOR_EDEFAULT : newVersionOperator;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION_OPERATOR, oldVersionOperator, versionOperator));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getVersion() {
		return version;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setVersion(String newVersion) {
		String oldVersion = version;
		version = newVersion;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION, oldVersion, version));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION_OPERATOR:
				return getVersionOperator();
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION:
				return getVersion();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION_OPERATOR:
				setVersionOperator((VersionOperator)newValue);
				return;
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION:
				setVersion((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION_OPERATOR:
				setVersionOperator(VERSION_OPERATOR_EDEFAULT);
				return;
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION:
				setVersion(VERSION_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION_OPERATOR:
				return versionOperator != VERSION_OPERATOR_EDEFAULT;
			case SolidityPackage.PRAGMA_VERSION_CONSTRAINT__VERSION:
				return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (versionOperator: ");
		result.append(versionOperator);
		result.append(", version: ");
		result.append(version);
		result.append(')');
		return result.toString();
	}

} //PragmaVersionConstraintImpl
